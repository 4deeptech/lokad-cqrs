//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 /Users/abdullin/MessageContracts.g 2012-07-24 17:26:24

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace  MessageContracts 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class MessageContractsLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int AS=4;
	public const int BlockToken=5;
	public const int COMMENT=6;
	public const int CommandToken=7;
	public const int DisctionaryToken=8;
	public const int ENTITY=9;
	public const int ESC_SEQ=10;
	public const int EntityDefinition=11;
	public const int EventToken=12;
	public const int FragmentEntry=13;
	public const int FragmentGroup=14;
	public const int FragmentReference=15;
	public const int HEX_DIGIT=16;
	public const int ID=17;
	public const int INT=18;
	public const int LET=19;
	public const int MemberToken=20;
	public const int Modifier=21;
	public const int ModifierDefinition=22;
	public const int OCTAL_ESC=23;
	public const int STRING=24;
	public const int StringRepresentationToken=25;
	public const int TypeToken=26;
	public const int UNICODE_ESC=27;
	public const int USING=28;
	public const int WS=29;

    // delegates
    // delegators

	public MessageContractsLexer()
	{
		OnCreated();
	}

	public MessageContractsLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public MessageContractsLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "/Users/abdullin/MessageContracts.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__30() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__30() {}

    // $ANTLR start "T__30"
    [GrammarRule("T__30")]
    private void mT__30()
    {
    	EnterRule_T__30();
    	EnterRule("T__30", 1);
    	TraceIn("T__30", 1);
    		try
    		{
    		int _type = T__30;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:9:7: ( '(' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:9:9: '('
    		{
    		DebugLocation(9, 9);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__30", 1);
    		LeaveRule("T__30", 1);
    		LeaveRule_T__30();
        }
    }
    // $ANTLR end "T__30"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__31() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__31() {}

    // $ANTLR start "T__31"
    [GrammarRule("T__31")]
    private void mT__31()
    {
    	EnterRule_T__31();
    	EnterRule("T__31", 2);
    	TraceIn("T__31", 2);
    		try
    		{
    		int _type = T__31;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:10:7: ( ')' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:10:9: ')'
    		{
    		DebugLocation(10, 9);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__31", 2);
    		LeaveRule("T__31", 2);
    		LeaveRule_T__31();
        }
    }
    // $ANTLR end "T__31"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__32() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__32() {}

    // $ANTLR start "T__32"
    [GrammarRule("T__32")]
    private void mT__32()
    {
    	EnterRule_T__32();
    	EnterRule("T__32", 3);
    	TraceIn("T__32", 3);
    		try
    		{
    		int _type = T__32;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:11:7: ( ',' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:11:9: ','
    		{
    		DebugLocation(11, 9);
    		Match(','); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__32", 3);
    		LeaveRule("T__32", 3);
    		LeaveRule_T__32();
        }
    }
    // $ANTLR end "T__32"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__33() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__33() {}

    // $ANTLR start "T__33"
    [GrammarRule("T__33")]
    private void mT__33()
    {
    	EnterRule_T__33();
    	EnterRule("T__33", 4);
    	TraceIn("T__33", 4);
    		try
    		{
    		int _type = T__33;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:12:7: ( ';' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:12:9: ';'
    		{
    		DebugLocation(12, 9);
    		Match(';'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__33", 4);
    		LeaveRule("T__33", 4);
    		LeaveRule_T__33();
        }
    }
    // $ANTLR end "T__33"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__34() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__34() {}

    // $ANTLR start "T__34"
    [GrammarRule("T__34")]
    private void mT__34()
    {
    	EnterRule_T__34();
    	EnterRule("T__34", 5);
    	TraceIn("T__34", 5);
    		try
    		{
    		int _type = T__34;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:13:7: ( '=' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:13:9: '='
    		{
    		DebugLocation(13, 9);
    		Match('='); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__34", 5);
    		LeaveRule("T__34", 5);
    		LeaveRule_T__34();
        }
    }
    // $ANTLR end "T__34"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_AS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_AS() {}

    // $ANTLR start "AS"
    [GrammarRule("AS")]
    private void mAS()
    {
    	EnterRule_AS();
    	EnterRule("AS", 6);
    	TraceIn("AS", 6);
    		try
    		{
    		int _type = AS;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:67:4: ( 'as' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:67:6: 'as'
    		{
    		DebugLocation(67, 6);
    		Match("as"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("AS", 6);
    		LeaveRule("AS", 6);
    		LeaveRule_AS();
        }
    }
    // $ANTLR end "AS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_USING() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_USING() {}

    // $ANTLR start "USING"
    [GrammarRule("USING")]
    private void mUSING()
    {
    	EnterRule_USING();
    	EnterRule("USING", 7);
    	TraceIn("USING", 7);
    		try
    		{
    		int _type = USING;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:69:2: ( 'using' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:69:4: 'using'
    		{
    		DebugLocation(69, 4);
    		Match("using"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("USING", 7);
    		LeaveRule("USING", 7);
    		LeaveRule_USING();
        }
    }
    // $ANTLR end "USING"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_LET() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_LET() {}

    // $ANTLR start "LET"
    [GrammarRule("LET")]
    private void mLET()
    {
    	EnterRule_LET();
    	EnterRule("LET", 8);
    	TraceIn("LET", 8);
    		try
    		{
    		int _type = LET;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:71:2: ( 'let' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:71:4: 'let'
    		{
    		DebugLocation(71, 4);
    		Match("let"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("LET", 8);
    		LeaveRule("LET", 8);
    		LeaveRule_LET();
        }
    }
    // $ANTLR end "LET"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ENTITY() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ENTITY() {}

    // $ANTLR start "ENTITY"
    [GrammarRule("ENTITY")]
    private void mENTITY()
    {
    	EnterRule_ENTITY();
    	EnterRule("ENTITY", 9);
    	TraceIn("ENTITY", 9);
    		try
    		{
    		int _type = ENTITY;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:72:9: ( 'entity' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:72:11: 'entity'
    		{
    		DebugLocation(72, 11);
    		Match("entity"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ENTITY", 9);
    		LeaveRule("ENTITY", 9);
    		LeaveRule_ENTITY();
        }
    }
    // $ANTLR end "ENTITY"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ID() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ID() {}

    // $ANTLR start "ID"
    [GrammarRule("ID")]
    private void mID()
    {
    	EnterRule_ID();
    	EnterRule("ID", 10);
    	TraceIn("ID", 10);
    		try
    		{
    		int _type = ID;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:73:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '<' | '>' | '[' | ']' )* )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:73:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '<' | '>' | '[' | ']' )*
    		{
    		DebugLocation(73, 7);
    		if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(73, 30);
    		// /Users/abdullin/MessageContracts.g:73:30: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '<' | '>' | '[' | ']' )*
    		try { DebugEnterSubRule(1);
    		while (true)
    		{
    			int alt1=2;
    			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    			int LA1_0 = input.LA(1);

    			if (((LA1_0>='0' && LA1_0<='9')||LA1_0=='<'||LA1_0=='>'||(LA1_0>='A' && LA1_0<='[')||LA1_0==']'||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
    			{
    				alt1 = 1;
    			}


    			} finally { DebugExitDecision(1); }
    			switch ( alt1 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /Users/abdullin/MessageContracts.g:
    				{
    				DebugLocation(73, 30);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop1;
    			}
    		}

    		loop1:
    			;

    		} finally { DebugExitSubRule(1); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ID", 10);
    		LeaveRule("ID", 10);
    		LeaveRule_ID();
        }
    }
    // $ANTLR end "ID"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_Modifier() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_Modifier() {}

    // $ANTLR start "Modifier"
    [GrammarRule("Modifier")]
    private void mModifier()
    {
    	EnterRule_Modifier();
    	EnterRule("Modifier", 11);
    	TraceIn("Modifier", 11);
    		try
    		{
    		int _type = Modifier;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:77:2: ( '?' | '!' | ';' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:
    		{
    		DebugLocation(77, 2);
    		if (input.LA(1)=='!'||input.LA(1)==';'||input.LA(1)=='?')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("Modifier", 11);
    		LeaveRule("Modifier", 11);
    		LeaveRule_Modifier();
        }
    }
    // $ANTLR end "Modifier"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_INT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_INT() {}

    // $ANTLR start "INT"
    [GrammarRule("INT")]
    private void mINT()
    {
    	EnterRule_INT();
    	EnterRule("INT", 12);
    	TraceIn("INT", 12);
    		try
    		{
    		int _type = INT;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:83:5: ( ( '0' .. '9' )+ )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:83:7: ( '0' .. '9' )+
    		{
    		DebugLocation(83, 7);
    		// /Users/abdullin/MessageContracts.g:83:7: ( '0' .. '9' )+
    		int cnt2=0;
    		try { DebugEnterSubRule(2);
    		while (true)
    		{
    			int alt2=2;
    			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    			int LA2_0 = input.LA(1);

    			if (((LA2_0>='0' && LA2_0<='9')))
    			{
    				alt2 = 1;
    			}


    			} finally { DebugExitDecision(2); }
    			switch (alt2)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /Users/abdullin/MessageContracts.g:
    				{
    				DebugLocation(83, 7);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt2 >= 1)
    					goto loop2;

    				EarlyExitException eee2 = new EarlyExitException( 2, input );
    				DebugRecognitionException(eee2);
    				throw eee2;
    			}
    			cnt2++;
    		}
    		loop2:
    			;

    		} finally { DebugExitSubRule(2); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("INT", 12);
    		LeaveRule("INT", 12);
    		LeaveRule_INT();
        }
    }
    // $ANTLR end "INT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_STRING() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_STRING() {}

    // $ANTLR start "STRING"
    [GrammarRule("STRING")]
    private void mSTRING()
    {
    	EnterRule_STRING();
    	EnterRule("STRING", 13);
    	TraceIn("STRING", 13);
    		try
    		{
    		int _type = STRING;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:87:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:87:8: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
    		{
    		DebugLocation(87, 8);
    		Match('\"'); 
    		DebugLocation(87, 12);
    		// /Users/abdullin/MessageContracts.g:87:12: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*
    		try { DebugEnterSubRule(3);
    		while (true)
    		{
    			int alt3=3;
    			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    			int LA3_0 = input.LA(1);

    			if ((LA3_0=='\\'))
    			{
    				alt3 = 1;
    			}
    			else if (((LA3_0>='\u0000' && LA3_0<='!')||(LA3_0>='#' && LA3_0<='[')||(LA3_0>=']' && LA3_0<='\uFFFF')))
    			{
    				alt3 = 2;
    			}


    			} finally { DebugExitDecision(3); }
    			switch ( alt3 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /Users/abdullin/MessageContracts.g:87:14: ESC_SEQ
    				{
    				DebugLocation(87, 14);
    				mESC_SEQ(); 

    				}
    				break;
    			case 2:
    				DebugEnterAlt(2);
    				// /Users/abdullin/MessageContracts.g:87:24: ~ ( '\\\\' | '\"' )
    				{
    				DebugLocation(87, 24);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop3;
    			}
    		}

    		loop3:
    			;

    		} finally { DebugExitSubRule(3); }

    		DebugLocation(87, 39);
    		Match('\"'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("STRING", 13);
    		LeaveRule("STRING", 13);
    		LeaveRule_STRING();
        }
    }
    // $ANTLR end "STRING"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_HEX_DIGIT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_HEX_DIGIT() {}

    // $ANTLR start "HEX_DIGIT"
    [GrammarRule("HEX_DIGIT")]
    private void mHEX_DIGIT()
    {
    	EnterRule_HEX_DIGIT();
    	EnterRule("HEX_DIGIT", 14);
    	TraceIn("HEX_DIGIT", 14);
    		try
    		{
    		// /Users/abdullin/MessageContracts.g:93:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:
    		{
    		DebugLocation(93, 11);
    		if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("HEX_DIGIT", 14);
    		LeaveRule("HEX_DIGIT", 14);
    		LeaveRule_HEX_DIGIT();
        }
    }
    // $ANTLR end "HEX_DIGIT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ESC_SEQ() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ESC_SEQ() {}

    // $ANTLR start "ESC_SEQ"
    [GrammarRule("ESC_SEQ")]
    private void mESC_SEQ()
    {
    	EnterRule_ESC_SEQ();
    	EnterRule("ESC_SEQ", 15);
    	TraceIn("ESC_SEQ", 15);
    		try
    		{
    		// /Users/abdullin/MessageContracts.g:97:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
    		int alt4=3;
    		try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    		int LA4_0 = input.LA(1);

    		if ((LA4_0=='\\'))
    		{
    			switch (input.LA(2))
    			{
    			case '\"':
    			case '\'':
    			case '\\':
    			case 'b':
    			case 'f':
    			case 'n':
    			case 'r':
    			case 't':
    				{
    				alt4 = 1;
    				}
    				break;
    			case 'u':
    				{
    				alt4 = 2;
    				}
    				break;
    			case '0':
    			case '1':
    			case '2':
    			case '3':
    			case '4':
    			case '5':
    			case '6':
    			case '7':
    				{
    				alt4 = 3;
    				}
    				break;
    			default:
    				{
    					NoViableAltException nvae = new NoViableAltException("", 4, 1, input);
    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    			}

    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(4); }
    		switch (alt4)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// /Users/abdullin/MessageContracts.g:97:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
    			{
    			DebugLocation(97, 9);
    			Match('\\'); 
    			DebugLocation(97, 14);
    			input.Consume();


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// /Users/abdullin/MessageContracts.g:98:9: UNICODE_ESC
    			{
    			DebugLocation(98, 9);
    			mUNICODE_ESC(); 

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// /Users/abdullin/MessageContracts.g:99:9: OCTAL_ESC
    			{
    			DebugLocation(99, 9);
    			mOCTAL_ESC(); 

    			}
    			break;

    		}
    	}
    	finally
    	{
    		TraceOut("ESC_SEQ", 15);
    		LeaveRule("ESC_SEQ", 15);
    		LeaveRule_ESC_SEQ();
        }
    }
    // $ANTLR end "ESC_SEQ"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_OCTAL_ESC() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_OCTAL_ESC() {}

    // $ANTLR start "OCTAL_ESC"
    [GrammarRule("OCTAL_ESC")]
    private void mOCTAL_ESC()
    {
    	EnterRule_OCTAL_ESC();
    	EnterRule("OCTAL_ESC", 16);
    	TraceIn("OCTAL_ESC", 16);
    		try
    		{
    		// /Users/abdullin/MessageContracts.g:104:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
    		int alt5=3;
    		try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    		int LA5_0 = input.LA(1);

    		if ((LA5_0=='\\'))
    		{
    			int LA5_1 = input.LA(2);

    			if (((LA5_1>='0' && LA5_1<='3')))
    			{
    				int LA5_2 = input.LA(3);

    				if (((LA5_2>='0' && LA5_2<='7')))
    				{
    					int LA5_4 = input.LA(4);

    					if (((LA5_4>='0' && LA5_4<='7')))
    					{
    						alt5 = 1;
    					}
    					else
    					{
    						alt5 = 2;
    					}
    				}
    				else
    				{
    					alt5 = 3;
    				}
    			}
    			else if (((LA5_1>='4' && LA5_1<='7')))
    			{
    				int LA5_3 = input.LA(3);

    				if (((LA5_3>='0' && LA5_3<='7')))
    				{
    					alt5 = 2;
    				}
    				else
    				{
    					alt5 = 3;
    				}
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 5, 1, input);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(5); }
    		switch (alt5)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// /Users/abdullin/MessageContracts.g:104:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
    			{
    			DebugLocation(104, 9);
    			Match('\\'); 
    			DebugLocation(104, 14);
    			input.Consume();

    			DebugLocation(104, 25);
    			input.Consume();

    			DebugLocation(104, 36);
    			input.Consume();


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// /Users/abdullin/MessageContracts.g:105:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
    			{
    			DebugLocation(105, 9);
    			Match('\\'); 
    			DebugLocation(105, 14);
    			input.Consume();

    			DebugLocation(105, 25);
    			input.Consume();


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// /Users/abdullin/MessageContracts.g:106:9: '\\\\' ( '0' .. '7' )
    			{
    			DebugLocation(106, 9);
    			Match('\\'); 
    			DebugLocation(106, 14);
    			input.Consume();


    			}
    			break;

    		}
    	}
    	finally
    	{
    		TraceOut("OCTAL_ESC", 16);
    		LeaveRule("OCTAL_ESC", 16);
    		LeaveRule_OCTAL_ESC();
        }
    }
    // $ANTLR end "OCTAL_ESC"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_UNICODE_ESC() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_UNICODE_ESC() {}

    // $ANTLR start "UNICODE_ESC"
    [GrammarRule("UNICODE_ESC")]
    private void mUNICODE_ESC()
    {
    	EnterRule_UNICODE_ESC();
    	EnterRule("UNICODE_ESC", 17);
    	TraceIn("UNICODE_ESC", 17);
    		try
    		{
    		// /Users/abdullin/MessageContracts.g:111:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:111:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    		{
    		DebugLocation(111, 9);
    		Match('\\'); 
    		DebugLocation(111, 14);
    		Match('u'); 
    		DebugLocation(111, 18);
    		mHEX_DIGIT(); 
    		DebugLocation(111, 28);
    		mHEX_DIGIT(); 
    		DebugLocation(111, 38);
    		mHEX_DIGIT(); 
    		DebugLocation(111, 48);
    		mHEX_DIGIT(); 

    		}

    	}
    	finally
    	{
    		TraceOut("UNICODE_ESC", 17);
    		LeaveRule("UNICODE_ESC", 17);
    		LeaveRule_UNICODE_ESC();
        }
    }
    // $ANTLR end "UNICODE_ESC"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_COMMENT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_COMMENT() {}

    // $ANTLR start "COMMENT"
    [GrammarRule("COMMENT")]
    private void mCOMMENT()
    {
    	EnterRule_COMMENT();
    	EnterRule("COMMENT", 18);
    	TraceIn("COMMENT", 18);
    		try
    		{
    		int _type = COMMENT;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:114:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
    		int alt9=2;
    		try { DebugEnterDecision(9, decisionCanBacktrack[9]);
    		int LA9_0 = input.LA(1);

    		if ((LA9_0=='/'))
    		{
    			int LA9_1 = input.LA(2);

    			if ((LA9_1=='/'))
    			{
    				alt9 = 1;
    			}
    			else if ((LA9_1=='*'))
    			{
    				alt9 = 2;
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 9, 1, input);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(9); }
    		switch (alt9)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// /Users/abdullin/MessageContracts.g:114:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    			{
    			DebugLocation(114, 9);
    			Match("//"); 

    			DebugLocation(114, 14);
    			// /Users/abdullin/MessageContracts.g:114:14: (~ ( '\\n' | '\\r' ) )*
    			try { DebugEnterSubRule(6);
    			while (true)
    			{
    				int alt6=2;
    				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
    				int LA6_0 = input.LA(1);

    				if (((LA6_0>='\u0000' && LA6_0<='\t')||(LA6_0>='\u000B' && LA6_0<='\f')||(LA6_0>='\u000E' && LA6_0<='\uFFFF')))
    				{
    					alt6 = 1;
    				}


    				} finally { DebugExitDecision(6); }
    				switch ( alt6 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// /Users/abdullin/MessageContracts.g:
    					{
    					DebugLocation(114, 14);
    					input.Consume();


    					}
    					break;

    				default:
    					goto loop6;
    				}
    			}

    			loop6:
    				;

    			} finally { DebugExitSubRule(6); }

    			DebugLocation(114, 28);
    			// /Users/abdullin/MessageContracts.g:114:28: ( '\\r' )?
    			int alt7=2;
    			try { DebugEnterSubRule(7);
    			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
    			int LA7_0 = input.LA(1);

    			if ((LA7_0=='\r'))
    			{
    				alt7 = 1;
    			}
    			} finally { DebugExitDecision(7); }
    			switch (alt7)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /Users/abdullin/MessageContracts.g:114:28: '\\r'
    				{
    				DebugLocation(114, 28);
    				Match('\r'); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(7); }

    			DebugLocation(114, 34);
    			Match('\n'); 
    			DebugLocation(114, 39);
    			_channel=HIDDEN;

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// /Users/abdullin/MessageContracts.g:115:9: '/*' ( options {greedy=false; } : . )* '*/'
    			{
    			DebugLocation(115, 9);
    			Match("/*"); 

    			DebugLocation(115, 14);
    			// /Users/abdullin/MessageContracts.g:115:14: ( options {greedy=false; } : . )*
    			try { DebugEnterSubRule(8);
    			while (true)
    			{
    				int alt8=2;
    				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
    				int LA8_0 = input.LA(1);

    				if ((LA8_0=='*'))
    				{
    					int LA8_1 = input.LA(2);

    					if ((LA8_1=='/'))
    					{
    						alt8 = 2;
    					}
    					else if (((LA8_1>='\u0000' && LA8_1<='.')||(LA8_1>='0' && LA8_1<='\uFFFF')))
    					{
    						alt8 = 1;
    					}


    				}
    				else if (((LA8_0>='\u0000' && LA8_0<=')')||(LA8_0>='+' && LA8_0<='\uFFFF')))
    				{
    					alt8 = 1;
    				}


    				} finally { DebugExitDecision(8); }
    				switch ( alt8 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// /Users/abdullin/MessageContracts.g:115:42: .
    					{
    					DebugLocation(115, 42);
    					MatchAny(); 

    					}
    					break;

    				default:
    					goto loop8;
    				}
    			}

    			loop8:
    				;

    			} finally { DebugExitSubRule(8); }

    			DebugLocation(115, 47);
    			Match("*/"); 

    			DebugLocation(115, 52);
    			_channel=HIDDEN;

    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("COMMENT", 18);
    		LeaveRule("COMMENT", 18);
    		LeaveRule_COMMENT();
        }
    }
    // $ANTLR end "COMMENT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_WS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_WS() {}

    // $ANTLR start "WS"
    [GrammarRule("WS")]
    private void mWS()
    {
    	EnterRule_WS();
    	EnterRule("WS", 19);
    	TraceIn("WS", 19);
    		try
    		{
    		int _type = WS;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:118:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:118:9: ( ' ' | '\\t' | '\\r' | '\\n' )
    		{
    		DebugLocation(118, 9);
    		if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(122, 11);
    		_channel=HIDDEN;

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("WS", 19);
    		LeaveRule("WS", 19);
    		LeaveRule_WS();
        }
    }
    // $ANTLR end "WS"

    public override void mTokens()
    {
    	// /Users/abdullin/MessageContracts.g:1:8: ( T__30 | T__31 | T__32 | T__33 | T__34 | AS | USING | LET | ENTITY | ID | Modifier | INT | STRING | COMMENT | WS )
    	int alt10=15;
    	try { DebugEnterDecision(10, decisionCanBacktrack[10]);
    	switch (input.LA(1))
    	{
    	case '(':
    		{
    		alt10 = 1;
    		}
    		break;
    	case ')':
    		{
    		alt10 = 2;
    		}
    		break;
    	case ',':
    		{
    		alt10 = 3;
    		}
    		break;
    	case ';':
    		{
    		alt10 = 4;
    		}
    		break;
    	case '=':
    		{
    		alt10 = 5;
    		}
    		break;
    	case 'a':
    		{
    		int LA10_6 = input.LA(2);

    		if ((LA10_6=='s'))
    		{
    			int LA10_17 = input.LA(3);

    			if (((LA10_17>='0' && LA10_17<='9')||LA10_17=='<'||LA10_17=='>'||(LA10_17>='A' && LA10_17<='[')||LA10_17==']'||LA10_17=='_'||(LA10_17>='a' && LA10_17<='z')))
    			{
    				alt10 = 10;
    			}
    			else
    			{
    				alt10 = 6;
    			}
    		}
    		else
    		{
    			alt10 = 10;
    		}
    		}
    		break;
    	case 'u':
    		{
    		int LA10_7 = input.LA(2);

    		if ((LA10_7=='s'))
    		{
    			int LA10_18 = input.LA(3);

    			if ((LA10_18=='i'))
    			{
    				int LA10_22 = input.LA(4);

    				if ((LA10_22=='n'))
    				{
    					int LA10_25 = input.LA(5);

    					if ((LA10_25=='g'))
    					{
    						int LA10_28 = input.LA(6);

    						if (((LA10_28>='0' && LA10_28<='9')||LA10_28=='<'||LA10_28=='>'||(LA10_28>='A' && LA10_28<='[')||LA10_28==']'||LA10_28=='_'||(LA10_28>='a' && LA10_28<='z')))
    						{
    							alt10 = 10;
    						}
    						else
    						{
    							alt10 = 7;
    						}
    					}
    					else
    					{
    						alt10 = 10;
    					}
    				}
    				else
    				{
    					alt10 = 10;
    				}
    			}
    			else
    			{
    				alt10 = 10;
    			}
    		}
    		else
    		{
    			alt10 = 10;
    		}
    		}
    		break;
    	case 'l':
    		{
    		int LA10_8 = input.LA(2);

    		if ((LA10_8=='e'))
    		{
    			int LA10_19 = input.LA(3);

    			if ((LA10_19=='t'))
    			{
    				int LA10_23 = input.LA(4);

    				if (((LA10_23>='0' && LA10_23<='9')||LA10_23=='<'||LA10_23=='>'||(LA10_23>='A' && LA10_23<='[')||LA10_23==']'||LA10_23=='_'||(LA10_23>='a' && LA10_23<='z')))
    				{
    					alt10 = 10;
    				}
    				else
    				{
    					alt10 = 8;
    				}
    			}
    			else
    			{
    				alt10 = 10;
    			}
    		}
    		else
    		{
    			alt10 = 10;
    		}
    		}
    		break;
    	case 'e':
    		{
    		int LA10_9 = input.LA(2);

    		if ((LA10_9=='n'))
    		{
    			int LA10_20 = input.LA(3);

    			if ((LA10_20=='t'))
    			{
    				int LA10_24 = input.LA(4);

    				if ((LA10_24=='i'))
    				{
    					int LA10_27 = input.LA(5);

    					if ((LA10_27=='t'))
    					{
    						int LA10_29 = input.LA(6);

    						if ((LA10_29=='y'))
    						{
    							int LA10_31 = input.LA(7);

    							if (((LA10_31>='0' && LA10_31<='9')||LA10_31=='<'||LA10_31=='>'||(LA10_31>='A' && LA10_31<='[')||LA10_31==']'||LA10_31=='_'||(LA10_31>='a' && LA10_31<='z')))
    							{
    								alt10 = 10;
    							}
    							else
    							{
    								alt10 = 9;
    							}
    						}
    						else
    						{
    							alt10 = 10;
    						}
    					}
    					else
    					{
    						alt10 = 10;
    					}
    				}
    				else
    				{
    					alt10 = 10;
    				}
    			}
    			else
    			{
    				alt10 = 10;
    			}
    		}
    		else
    		{
    			alt10 = 10;
    		}
    		}
    		break;
    	case 'A':
    	case 'B':
    	case 'C':
    	case 'D':
    	case 'E':
    	case 'F':
    	case 'G':
    	case 'H':
    	case 'I':
    	case 'J':
    	case 'K':
    	case 'L':
    	case 'M':
    	case 'N':
    	case 'O':
    	case 'P':
    	case 'Q':
    	case 'R':
    	case 'S':
    	case 'T':
    	case 'U':
    	case 'V':
    	case 'W':
    	case 'X':
    	case 'Y':
    	case 'Z':
    	case '_':
    	case 'b':
    	case 'c':
    	case 'd':
    	case 'f':
    	case 'g':
    	case 'h':
    	case 'i':
    	case 'j':
    	case 'k':
    	case 'm':
    	case 'n':
    	case 'o':
    	case 'p':
    	case 'q':
    	case 'r':
    	case 's':
    	case 't':
    	case 'v':
    	case 'w':
    	case 'x':
    	case 'y':
    	case 'z':
    		{
    		alt10 = 10;
    		}
    		break;
    	case '!':
    	case '?':
    		{
    		alt10 = 11;
    		}
    		break;
    	case '0':
    	case '1':
    	case '2':
    	case '3':
    	case '4':
    	case '5':
    	case '6':
    	case '7':
    	case '8':
    	case '9':
    		{
    		alt10 = 12;
    		}
    		break;
    	case '\"':
    		{
    		alt10 = 13;
    		}
    		break;
    	case '/':
    		{
    		alt10 = 14;
    		}
    		break;
    	case '\t':
    	case '\n':
    	case '\r':
    	case ' ':
    		{
    		alt10 = 15;
    		}
    		break;
    	default:
    		{
    			NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    	}

    	} finally { DebugExitDecision(10); }
    	switch (alt10)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:1:10: T__30
    		{
    		DebugLocation(1, 10);
    		mT__30(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// /Users/abdullin/MessageContracts.g:1:16: T__31
    		{
    		DebugLocation(1, 16);
    		mT__31(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// /Users/abdullin/MessageContracts.g:1:22: T__32
    		{
    		DebugLocation(1, 22);
    		mT__32(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// /Users/abdullin/MessageContracts.g:1:28: T__33
    		{
    		DebugLocation(1, 28);
    		mT__33(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// /Users/abdullin/MessageContracts.g:1:34: T__34
    		{
    		DebugLocation(1, 34);
    		mT__34(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// /Users/abdullin/MessageContracts.g:1:40: AS
    		{
    		DebugLocation(1, 40);
    		mAS(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// /Users/abdullin/MessageContracts.g:1:43: USING
    		{
    		DebugLocation(1, 43);
    		mUSING(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// /Users/abdullin/MessageContracts.g:1:49: LET
    		{
    		DebugLocation(1, 49);
    		mLET(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// /Users/abdullin/MessageContracts.g:1:53: ENTITY
    		{
    		DebugLocation(1, 53);
    		mENTITY(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// /Users/abdullin/MessageContracts.g:1:60: ID
    		{
    		DebugLocation(1, 60);
    		mID(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// /Users/abdullin/MessageContracts.g:1:63: Modifier
    		{
    		DebugLocation(1, 63);
    		mModifier(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// /Users/abdullin/MessageContracts.g:1:72: INT
    		{
    		DebugLocation(1, 72);
    		mINT(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// /Users/abdullin/MessageContracts.g:1:76: STRING
    		{
    		DebugLocation(1, 76);
    		mSTRING(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// /Users/abdullin/MessageContracts.g:1:83: COMMENT
    		{
    		DebugLocation(1, 83);
    		mCOMMENT(); 

    		}
    		break;
    	case 15:
    		DebugEnterAlt(15);
    		// /Users/abdullin/MessageContracts.g:1:91: WS
    		{
    		DebugLocation(1, 91);
    		mWS(); 

    		}
    		break;

    	}

    }


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

 
	#endregion

}

} // namespace  MessageContracts 
