//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 /Users/abdullin/MessageContracts.g 2012-07-24 17:26:24

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  MessageContracts 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class MessageContractsParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AS", "BlockToken", "COMMENT", "CommandToken", "DisctionaryToken", "ENTITY", "ESC_SEQ", "EntityDefinition", "EventToken", "FragmentEntry", "FragmentGroup", "FragmentReference", "HEX_DIGIT", "ID", "INT", "LET", "MemberToken", "Modifier", "ModifierDefinition", "OCTAL_ESC", "STRING", "StringRepresentationToken", "TypeToken", "UNICODE_ESC", "USING", "WS", "'('", "')'", "','", "';'", "'='"
	};
	public const int EOF=-1;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int AS=4;
	public const int BlockToken=5;
	public const int COMMENT=6;
	public const int CommandToken=7;
	public const int DisctionaryToken=8;
	public const int ENTITY=9;
	public const int ESC_SEQ=10;
	public const int EntityDefinition=11;
	public const int EventToken=12;
	public const int FragmentEntry=13;
	public const int FragmentGroup=14;
	public const int FragmentReference=15;
	public const int HEX_DIGIT=16;
	public const int ID=17;
	public const int INT=18;
	public const int LET=19;
	public const int MemberToken=20;
	public const int Modifier=21;
	public const int ModifierDefinition=22;
	public const int OCTAL_ESC=23;
	public const int STRING=24;
	public const int StringRepresentationToken=25;
	public const int TypeToken=26;
	public const int UNICODE_ESC=27;
	public const int USING=28;
	public const int WS=29;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public MessageContractsParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public MessageContractsParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return MessageContractsParser.tokenNames; } }
	public override string GrammarFileName { get { return "/Users/abdullin/MessageContracts.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_program() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_program() {}

	// $ANTLR start "program"
	// /Users/abdullin/MessageContracts.g:28:1: program : ( declaration )+ ;
	[GrammarRule("program")]
	private AstParserRuleReturnScope<object, IToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> declaration1 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(28, 1);
		try
		{
			// /Users/abdullin/MessageContracts.g:29:2: ( ( declaration )+ )
			DebugEnterAlt(1);
			// /Users/abdullin/MessageContracts.g:29:4: ( declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(29, 4);
			// /Users/abdullin/MessageContracts.g:29:4: ( declaration )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, decisionCanBacktrack[1]);
				int LA1_0 = input.LA(1);

				if ((LA1_0==ENTITY||LA1_0==ID||LA1_0==LET||LA1_0==USING))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/abdullin/MessageContracts.g:29:4: declaration
					{
					DebugLocation(29, 4);
					PushFollow(Follow._declaration_in_program105);
					declaration1=declaration();
					PopFollow();

					adaptor.AddChild(root_0, declaration1.Tree);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
	    }
	 	DebugLocation(30, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration() {}

	// $ANTLR start "declaration"
	// /Users/abdullin/MessageContracts.g:32:1: declaration : ( modifier_declaration | frag_declaration | type_declaration | entity_declaration );
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<object, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 2);
		TraceIn("declaration", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> modifier_declaration2 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> frag_declaration3 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_declaration4 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> entity_declaration5 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(32, 1);
		try
		{
			// /Users/abdullin/MessageContracts.g:33:2: ( modifier_declaration | frag_declaration | type_declaration | entity_declaration )
			int alt2=4;
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			switch (input.LA(1))
			{
			case USING:
				{
				alt2 = 1;
				}
				break;
			case LET:
				{
				alt2 = 2;
				}
				break;
			case ID:
				{
				alt2 = 3;
				}
				break;
			case ENTITY:
				{
				alt2 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/abdullin/MessageContracts.g:33:4: modifier_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(33, 4);
				PushFollow(Follow._modifier_declaration_in_declaration118);
				modifier_declaration2=modifier_declaration();
				PopFollow();

				adaptor.AddChild(root_0, modifier_declaration2.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/abdullin/MessageContracts.g:34:4: frag_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(34, 4);
				PushFollow(Follow._frag_declaration_in_declaration123);
				frag_declaration3=frag_declaration();
				PopFollow();

				adaptor.AddChild(root_0, frag_declaration3.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /Users/abdullin/MessageContracts.g:35:4: type_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(35, 4);
				PushFollow(Follow._type_declaration_in_declaration128);
				type_declaration4=type_declaration();
				PopFollow();

				adaptor.AddChild(root_0, type_declaration4.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// /Users/abdullin/MessageContracts.g:36:4: entity_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(36, 4);
				PushFollow(Follow._entity_declaration_in_declaration133);
				entity_declaration5=entity_declaration();
				PopFollow();

				adaptor.AddChild(root_0, entity_declaration5.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 2);
			LeaveRule("declaration", 2);
			LeaveRule_declaration();
	    }
	 	DebugLocation(37, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_frag_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_frag_declaration() {}

	// $ANTLR start "frag_declaration"
	// /Users/abdullin/MessageContracts.g:39:1: frag_declaration : LET ID '=' ID ID ';' -> ^( FragmentEntry ID ID ID ) ;
	[GrammarRule("frag_declaration")]
	private AstParserRuleReturnScope<object, IToken> frag_declaration()
	{
		EnterRule_frag_declaration();
		EnterRule("frag_declaration", 3);
		TraceIn("frag_declaration", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken LET6 = default(IToken);
	    IToken ID7 = default(IToken);
	    IToken char_literal8 = default(IToken);
	    IToken ID9 = default(IToken);
	    IToken ID10 = default(IToken);
	    IToken char_literal11 = default(IToken);

	    object LET6_tree = default(object);
	    object ID7_tree = default(object);
	    object char_literal8_tree = default(object);
	    object ID9_tree = default(object);
	    object ID10_tree = default(object);
	    object char_literal11_tree = default(object);
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
	    RewriteRuleITokenStream stream_33=new RewriteRuleITokenStream(adaptor,"token 33");
	    RewriteRuleITokenStream stream_34=new RewriteRuleITokenStream(adaptor,"token 34");
	    RewriteRuleITokenStream stream_LET=new RewriteRuleITokenStream(adaptor,"token LET");

		try { DebugEnterRule(GrammarFileName, "frag_declaration");
		DebugLocation(39, 52);
		try
		{
			// /Users/abdullin/MessageContracts.g:40:2: ( LET ID '=' ID ID ';' -> ^( FragmentEntry ID ID ID ) )
			DebugEnterAlt(1);
			// /Users/abdullin/MessageContracts.g:40:4: LET ID '=' ID ID ';'
			{
			DebugLocation(40, 4);
			LET6=(IToken)Match(input,LET,Follow._LET_in_frag_declaration145);  
			stream_LET.Add(LET6);

			DebugLocation(40, 8);
			ID7=(IToken)Match(input,ID,Follow._ID_in_frag_declaration147);  
			stream_ID.Add(ID7);

			DebugLocation(40, 11);
			char_literal8=(IToken)Match(input,34,Follow._34_in_frag_declaration149);  
			stream_34.Add(char_literal8);

			DebugLocation(40, 15);
			ID9=(IToken)Match(input,ID,Follow._ID_in_frag_declaration151);  
			stream_ID.Add(ID9);

			DebugLocation(40, 18);
			ID10=(IToken)Match(input,ID,Follow._ID_in_frag_declaration153);  
			stream_ID.Add(ID10);

			DebugLocation(40, 21);
			char_literal11=(IToken)Match(input,33,Follow._33_in_frag_declaration155);  
			stream_33.Add(char_literal11);



			{
			// AST REWRITE
			// elements: ID, ID, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 40:25: -> ^( FragmentEntry ID ID ID )
			{
				DebugLocation(40, 28);
				// /Users/abdullin/MessageContracts.g:40:28: ^( FragmentEntry ID ID ID )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(40, 30);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FragmentEntry, "FragmentEntry"), root_1);

				DebugLocation(40, 44);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(40, 47);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(40, 50);
				adaptor.AddChild(root_1, stream_ID.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("frag_declaration", 3);
			LeaveRule("frag_declaration", 3);
			LeaveRule_frag_declaration();
	    }
	 	DebugLocation(40, 52);
		} finally { DebugExitRule(GrammarFileName, "frag_declaration"); }
		return retval;

	}
	// $ANTLR end "frag_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_modifier_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_modifier_declaration() {}

	// $ANTLR start "modifier_declaration"
	// /Users/abdullin/MessageContracts.g:42:1: modifier_declaration : USING Modifier '=' ID ';' -> ^( ModifierDefinition Modifier ID ) ;
	[GrammarRule("modifier_declaration")]
	private AstParserRuleReturnScope<object, IToken> modifier_declaration()
	{
		EnterRule_modifier_declaration();
		EnterRule("modifier_declaration", 4);
		TraceIn("modifier_declaration", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USING12 = default(IToken);
	    IToken Modifier13 = default(IToken);
	    IToken char_literal14 = default(IToken);
	    IToken ID15 = default(IToken);
	    IToken char_literal16 = default(IToken);

	    object USING12_tree = default(object);
	    object Modifier13_tree = default(object);
	    object char_literal14_tree = default(object);
	    object ID15_tree = default(object);
	    object char_literal16_tree = default(object);
	    RewriteRuleITokenStream stream_USING=new RewriteRuleITokenStream(adaptor,"token USING");
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
	    RewriteRuleITokenStream stream_Modifier=new RewriteRuleITokenStream(adaptor,"token Modifier");
	    RewriteRuleITokenStream stream_33=new RewriteRuleITokenStream(adaptor,"token 33");
	    RewriteRuleITokenStream stream_34=new RewriteRuleITokenStream(adaptor,"token 34");

		try { DebugEnterRule(GrammarFileName, "modifier_declaration");
		DebugLocation(42, 65);
		try
		{
			// /Users/abdullin/MessageContracts.g:43:2: ( USING Modifier '=' ID ';' -> ^( ModifierDefinition Modifier ID ) )
			DebugEnterAlt(1);
			// /Users/abdullin/MessageContracts.g:43:4: USING Modifier '=' ID ';'
			{
			DebugLocation(43, 4);
			USING12=(IToken)Match(input,USING,Follow._USING_in_modifier_declaration182);  
			stream_USING.Add(USING12);

			DebugLocation(43, 10);
			Modifier13=(IToken)Match(input,Modifier,Follow._Modifier_in_modifier_declaration184);  
			stream_Modifier.Add(Modifier13);

			DebugLocation(43, 19);
			char_literal14=(IToken)Match(input,34,Follow._34_in_modifier_declaration186);  
			stream_34.Add(char_literal14);

			DebugLocation(43, 23);
			ID15=(IToken)Match(input,ID,Follow._ID_in_modifier_declaration188);  
			stream_ID.Add(ID15);

			DebugLocation(43, 26);
			char_literal16=(IToken)Match(input,33,Follow._33_in_modifier_declaration190);  
			stream_33.Add(char_literal16);



			{
			// AST REWRITE
			// elements: Modifier, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 43:30: -> ^( ModifierDefinition Modifier ID )
			{
				DebugLocation(43, 33);
				// /Users/abdullin/MessageContracts.g:43:33: ^( ModifierDefinition Modifier ID )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(43, 35);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ModifierDefinition, "ModifierDefinition"), root_1);

				DebugLocation(43, 54);
				adaptor.AddChild(root_1, stream_Modifier.NextNode());
				DebugLocation(43, 63);
				adaptor.AddChild(root_1, stream_ID.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifier_declaration", 4);
			LeaveRule("modifier_declaration", 4);
			LeaveRule_modifier_declaration();
	    }
	 	DebugLocation(43, 65);
		} finally { DebugExitRule(GrammarFileName, "modifier_declaration"); }
		return retval;

	}
	// $ANTLR end "modifier_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_entity_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_entity_declaration() {}

	// $ANTLR start "entity_declaration"
	// /Users/abdullin/MessageContracts.g:46:1: entity_declaration : ENTITY ID block ';' -> ^( EntityDefinition ID block ) ;
	[GrammarRule("entity_declaration")]
	private AstParserRuleReturnScope<object, IToken> entity_declaration()
	{
		EnterRule_entity_declaration();
		EnterRule("entity_declaration", 5);
		TraceIn("entity_declaration", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ENTITY17 = default(IToken);
	    IToken ID18 = default(IToken);
	    IToken char_literal20 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> block19 = default(AstParserRuleReturnScope<object, IToken>);

	    object ENTITY17_tree = default(object);
	    object ID18_tree = default(object);
	    object char_literal20_tree = default(object);
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
	    RewriteRuleITokenStream stream_33=new RewriteRuleITokenStream(adaptor,"token 33");
	    RewriteRuleITokenStream stream_ENTITY=new RewriteRuleITokenStream(adaptor,"token ENTITY");
	    RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "entity_declaration");
		DebugLocation(46, 54);
		try
		{
			// /Users/abdullin/MessageContracts.g:47:2: ( ENTITY ID block ';' -> ^( EntityDefinition ID block ) )
			DebugEnterAlt(1);
			// /Users/abdullin/MessageContracts.g:47:4: ENTITY ID block ';'
			{
			DebugLocation(47, 4);
			ENTITY17=(IToken)Match(input,ENTITY,Follow._ENTITY_in_entity_declaration215);  
			stream_ENTITY.Add(ENTITY17);

			DebugLocation(47, 11);
			ID18=(IToken)Match(input,ID,Follow._ID_in_entity_declaration217);  
			stream_ID.Add(ID18);

			DebugLocation(47, 14);
			PushFollow(Follow._block_in_entity_declaration219);
			block19=block();
			PopFollow();

			stream_block.Add(block19.Tree);
			DebugLocation(47, 20);
			char_literal20=(IToken)Match(input,33,Follow._33_in_entity_declaration221);  
			stream_33.Add(char_literal20);



			{
			// AST REWRITE
			// elements: ID, block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 47:24: -> ^( EntityDefinition ID block )
			{
				DebugLocation(47, 27);
				// /Users/abdullin/MessageContracts.g:47:27: ^( EntityDefinition ID block )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(47, 29);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(EntityDefinition, "EntityDefinition"), root_1);

				DebugLocation(47, 46);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(47, 49);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("entity_declaration", 5);
			LeaveRule("entity_declaration", 5);
			LeaveRule_entity_declaration();
	    }
	 	DebugLocation(47, 54);
		} finally { DebugExitRule(GrammarFileName, "entity_declaration"); }
		return retval;

	}
	// $ANTLR end "entity_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_type_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_type_declaration() {}

	// $ANTLR start "type_declaration"
	// /Users/abdullin/MessageContracts.g:49:1: type_declaration : ID ( Modifier )? block -> ^( TypeToken ID block ( Modifier )? ) ;
	[GrammarRule("type_declaration")]
	private AstParserRuleReturnScope<object, IToken> type_declaration()
	{
		EnterRule_type_declaration();
		EnterRule("type_declaration", 6);
		TraceIn("type_declaration", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ID21 = default(IToken);
	    IToken Modifier22 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> block23 = default(AstParserRuleReturnScope<object, IToken>);

	    object ID21_tree = default(object);
	    object Modifier22_tree = default(object);
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
	    RewriteRuleITokenStream stream_Modifier=new RewriteRuleITokenStream(adaptor,"token Modifier");
	    RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "type_declaration");
		DebugLocation(49, 56);
		try
		{
			// /Users/abdullin/MessageContracts.g:50:2: ( ID ( Modifier )? block -> ^( TypeToken ID block ( Modifier )? ) )
			DebugEnterAlt(1);
			// /Users/abdullin/MessageContracts.g:50:4: ID ( Modifier )? block
			{
			DebugLocation(50, 4);
			ID21=(IToken)Match(input,ID,Follow._ID_in_type_declaration241);  
			stream_ID.Add(ID21);

			DebugLocation(50, 7);
			// /Users/abdullin/MessageContracts.g:50:7: ( Modifier )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==Modifier))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/abdullin/MessageContracts.g:50:7: Modifier
				{
				DebugLocation(50, 7);
				Modifier22=(IToken)Match(input,Modifier,Follow._Modifier_in_type_declaration243);  
				stream_Modifier.Add(Modifier22);


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(50, 17);
			PushFollow(Follow._block_in_type_declaration246);
			block23=block();
			PopFollow();

			stream_block.Add(block23.Tree);


			{
			// AST REWRITE
			// elements: ID, block, Modifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 50:23: -> ^( TypeToken ID block ( Modifier )? )
			{
				DebugLocation(50, 26);
				// /Users/abdullin/MessageContracts.g:50:26: ^( TypeToken ID block ( Modifier )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(50, 28);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TypeToken, "TypeToken"), root_1);

				DebugLocation(50, 38);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(50, 41);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(50, 47);
				// /Users/abdullin/MessageContracts.g:50:47: ( Modifier )?
				if (stream_Modifier.HasNext)
				{
					DebugLocation(50, 47);
					adaptor.AddChild(root_1, stream_Modifier.NextNode());

				}
				stream_Modifier.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_declaration", 6);
			LeaveRule("type_declaration", 6);
			LeaveRule_type_declaration();
	    }
	 	DebugLocation(50, 56);
		} finally { DebugExitRule(GrammarFileName, "type_declaration"); }
		return retval;

	}
	// $ANTLR end "type_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_member() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_member() {}

	// $ANTLR start "member"
	// /Users/abdullin/MessageContracts.g:52:1: member : ( ID ID -> ^( MemberToken ID ID ) | ID -> ^( FragmentReference ID ) );
	[GrammarRule("member")]
	private AstParserRuleReturnScope<object, IToken> member()
	{
		EnterRule_member();
		EnterRule("member", 7);
		TraceIn("member", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ID24 = default(IToken);
	    IToken ID25 = default(IToken);
	    IToken ID26 = default(IToken);

	    object ID24_tree = default(object);
	    object ID25_tree = default(object);
	    object ID26_tree = default(object);
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");

		try { DebugEnterRule(GrammarFileName, "member");
		DebugLocation(52, 1);
		try
		{
			// /Users/abdullin/MessageContracts.g:53:2: ( ID ID -> ^( MemberToken ID ID ) | ID -> ^( FragmentReference ID ) )
			int alt4=2;
			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
			int LA4_0 = input.LA(1);

			if ((LA4_0==ID))
			{
				int LA4_1 = input.LA(2);

				if ((LA4_1==ID))
				{
					alt4 = 1;
				}
				else if (((LA4_1>=31 && LA4_1<=32)))
				{
					alt4 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/abdullin/MessageContracts.g:53:4: ID ID
				{
				DebugLocation(53, 4);
				ID24=(IToken)Match(input,ID,Follow._ID_in_member271);  
				stream_ID.Add(ID24);

				DebugLocation(53, 7);
				ID25=(IToken)Match(input,ID,Follow._ID_in_member273);  
				stream_ID.Add(ID25);



				{
				// AST REWRITE
				// elements: ID, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 53:10: -> ^( MemberToken ID ID )
				{
					DebugLocation(53, 13);
					// /Users/abdullin/MessageContracts.g:53:13: ^( MemberToken ID ID )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(53, 15);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(MemberToken, "MemberToken"), root_1);

					DebugLocation(53, 27);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(53, 30);
					adaptor.AddChild(root_1, stream_ID.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/abdullin/MessageContracts.g:54:4: ID
				{
				DebugLocation(54, 4);
				ID26=(IToken)Match(input,ID,Follow._ID_in_member288);  
				stream_ID.Add(ID26);



				{
				// AST REWRITE
				// elements: ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 54:7: -> ^( FragmentReference ID )
				{
					DebugLocation(54, 10);
					// /Users/abdullin/MessageContracts.g:54:10: ^( FragmentReference ID )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(54, 12);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FragmentReference, "FragmentReference"), root_1);

					DebugLocation(54, 30);
					adaptor.AddChild(root_1, stream_ID.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member", 7);
			LeaveRule("member", 7);
			LeaveRule_member();
	    }
	 	DebugLocation(55, 1);
		} finally { DebugExitRule(GrammarFileName, "member"); }
		return retval;

	}
	// $ANTLR end "member"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_block() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_block() {}

	// $ANTLR start "block"
	// /Users/abdullin/MessageContracts.g:58:1: block : lc= '(' ( member ( ',' member )* )? ')' ( representation )? -> ^( BlockToken[$lc,\"Block\"] ( member )* ( representation )? ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<object, IToken> block()
	{
		EnterRule_block();
		EnterRule("block", 8);
		TraceIn("block", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken lc = default(IToken);
	    IToken char_literal28 = default(IToken);
	    IToken char_literal30 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> member27 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> member29 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> representation31 = default(AstParserRuleReturnScope<object, IToken>);

	    object lc_tree = default(object);
	    object char_literal28_tree = default(object);
	    object char_literal30_tree = default(object);
	    RewriteRuleITokenStream stream_30=new RewriteRuleITokenStream(adaptor,"token 30");
	    RewriteRuleITokenStream stream_32=new RewriteRuleITokenStream(adaptor,"token 32");
	    RewriteRuleITokenStream stream_31=new RewriteRuleITokenStream(adaptor,"token 31");
	    RewriteRuleSubtreeStream stream_member=new RewriteRuleSubtreeStream(adaptor,"rule member");
	    RewriteRuleSubtreeStream stream_representation=new RewriteRuleSubtreeStream(adaptor,"rule representation");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(58, 4);
		try
		{
			// /Users/abdullin/MessageContracts.g:59:5: (lc= '(' ( member ( ',' member )* )? ')' ( representation )? -> ^( BlockToken[$lc,\"Block\"] ( member )* ( representation )? ) )
			DebugEnterAlt(1);
			// /Users/abdullin/MessageContracts.g:59:9: lc= '(' ( member ( ',' member )* )? ')' ( representation )?
			{
			DebugLocation(59, 11);
			lc=(IToken)Match(input,30,Follow._30_in_block316);  
			stream_30.Add(lc);

			DebugLocation(60, 13);
			// /Users/abdullin/MessageContracts.g:60:13: ( member ( ',' member )* )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, decisionCanBacktrack[6]);
			int LA6_0 = input.LA(1);

			if ((LA6_0==ID))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/abdullin/MessageContracts.g:60:14: member ( ',' member )*
				{
				DebugLocation(60, 14);
				PushFollow(Follow._member_in_block331);
				member27=member();
				PopFollow();

				stream_member.Add(member27.Tree);
				DebugLocation(60, 21);
				// /Users/abdullin/MessageContracts.g:60:21: ( ',' member )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, decisionCanBacktrack[5]);
					int LA5_0 = input.LA(1);

					if ((LA5_0==32))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/abdullin/MessageContracts.g:60:22: ',' member
						{
						DebugLocation(60, 22);
						char_literal28=(IToken)Match(input,32,Follow._32_in_block334);  
						stream_32.Add(char_literal28);

						DebugLocation(60, 26);
						PushFollow(Follow._member_in_block336);
						member29=member();
						PopFollow();

						stream_member.Add(member29.Tree);

						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }


				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(61, 9);
			char_literal30=(IToken)Match(input,31,Follow._31_in_block350);  
			stream_31.Add(char_literal30);

			DebugLocation(61, 13);
			// /Users/abdullin/MessageContracts.g:61:13: ( representation )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
			int LA7_0 = input.LA(1);

			if ((LA7_0==AS))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/abdullin/MessageContracts.g:61:13: representation
				{
				DebugLocation(61, 13);
				PushFollow(Follow._representation_in_block352);
				representation31=representation();
				PopFollow();

				stream_representation.Add(representation31.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }



			{
			// AST REWRITE
			// elements: representation, member
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 62:9: -> ^( BlockToken[$lc,\"Block\"] ( member )* ( representation )? )
			{
				DebugLocation(62, 12);
				// /Users/abdullin/MessageContracts.g:62:12: ^( BlockToken[$lc,\"Block\"] ( member )* ( representation )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(62, 14);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(BlockToken, lc, "Block"), root_1);

				DebugLocation(62, 38);
				// /Users/abdullin/MessageContracts.g:62:38: ( member )*
				while ( stream_member.HasNext )
				{
					DebugLocation(62, 38);
					adaptor.AddChild(root_1, stream_member.NextTree());

				}
				stream_member.Reset();
				DebugLocation(62, 46);
				// /Users/abdullin/MessageContracts.g:62:46: ( representation )?
				if (stream_representation.HasNext)
				{
					DebugLocation(62, 46);
					adaptor.AddChild(root_1, stream_representation.NextTree());

				}
				stream_representation.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 8);
			LeaveRule("block", 8);
			LeaveRule_block();
	    }
	 	DebugLocation(63, 4);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_representation() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_representation() {}

	// $ANTLR start "representation"
	// /Users/abdullin/MessageContracts.g:65:1: representation : AS STRING -> ^( StringRepresentationToken STRING ) ;
	[GrammarRule("representation")]
	private AstParserRuleReturnScope<object, IToken> representation()
	{
		EnterRule_representation();
		EnterRule("representation", 9);
		TraceIn("representation", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AS32 = default(IToken);
	    IToken STRING33 = default(IToken);

	    object AS32_tree = default(object);
	    object STRING33_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "representation");
		DebugLocation(65, 51);
		try
		{
			// /Users/abdullin/MessageContracts.g:66:2: ( AS STRING -> ^( StringRepresentationToken STRING ) )
			DebugEnterAlt(1);
			// /Users/abdullin/MessageContracts.g:66:4: AS STRING
			{
			DebugLocation(66, 4);
			AS32=(IToken)Match(input,AS,Follow._AS_in_representation396);  
			stream_AS.Add(AS32);

			DebugLocation(66, 7);
			STRING33=(IToken)Match(input,STRING,Follow._STRING_in_representation398);  
			stream_STRING.Add(STRING33);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 66:14: -> ^( StringRepresentationToken STRING )
			{
				DebugLocation(66, 17);
				// /Users/abdullin/MessageContracts.g:66:17: ^( StringRepresentationToken STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(66, 19);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(StringRepresentationToken, "StringRepresentationToken"), root_1);

				DebugLocation(66, 45);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("representation", 9);
			LeaveRule("representation", 9);
			LeaveRule_representation();
	    }
	 	DebugLocation(66, 51);
		} finally { DebugExitRule(GrammarFileName, "representation"); }
		return retval;

	}
	// $ANTLR end "representation"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _declaration_in_program105 = new BitSet(new ulong[]{0x100A0202UL});
		public static readonly BitSet _modifier_declaration_in_declaration118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _frag_declaration_in_declaration123 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_declaration_in_declaration128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _entity_declaration_in_declaration133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LET_in_frag_declaration145 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ID_in_frag_declaration147 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _34_in_frag_declaration149 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ID_in_frag_declaration151 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ID_in_frag_declaration153 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_frag_declaration155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USING_in_modifier_declaration182 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _Modifier_in_modifier_declaration184 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _34_in_modifier_declaration186 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ID_in_modifier_declaration188 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_modifier_declaration190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ENTITY_in_entity_declaration215 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ID_in_entity_declaration217 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _block_in_entity_declaration219 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_entity_declaration221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_type_declaration241 = new BitSet(new ulong[]{0x40200000UL});
		public static readonly BitSet _Modifier_in_type_declaration243 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _block_in_type_declaration246 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_member271 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ID_in_member273 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_member288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_block316 = new BitSet(new ulong[]{0x80020000UL});
		public static readonly BitSet _member_in_block331 = new BitSet(new ulong[]{0x180000000UL});
		public static readonly BitSet _32_in_block334 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _member_in_block336 = new BitSet(new ulong[]{0x180000000UL});
		public static readonly BitSet _31_in_block350 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _representation_in_block352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AS_in_representation396 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _STRING_in_representation398 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  MessageContracts 
