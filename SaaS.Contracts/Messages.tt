let user = UserId UserId;
let registration = RegistrationId RegistrationId;
let security = SecurityId SecurityId;
let customer = CustomerId CustomerId;

// common
let description = string Description;
let dateUtc = DateTime DateUtc;
let timeUtc = DateTime TimeUtc;
let email = Email Email;


using ? = ISampleCommand;
using ! = ISampleEvent;



// SERVICES

using ? = IFunctionalCommand;
using ! = IFunctionalEvent;

InstanceStarted!(string codeVersion, string role, string instance)
SendMailMessage?(Email[] to, string subject, string body, bool isHtml, Email[] cc,  Email optionalSender, Email optionalReplyTo)
MailMessageSent!(ref SendMailMessage)



entity Security (SecurityId Id) 
// ============================
// Matches to the customer/account but represents security details

using ? = ICommand<SecurityId>;
using ! = IEvent<SecurityId>;
let display = string displayName;
let token = string token;

CreateSecurityAggregate? () 
  as "Create security group"

CreateSecurityFromRegistration? (registration, string login, string pwd, display, string optionalIdentity)

SecurityAggregateCreated! ()
  as "Security group created"


AddSecurityPassword? (display, string login, string password)
  as "Add login '{DisplayName}': {Login}/{Password}"
SecurityPasswordAdded! (user, display, string login, string passwordHash, string passwordSalt, string token)
  as "Added login '{DisplayName}' as {UserId} with encrypted pass and salt"

AddSecurityIdentity? (display, string identity)
  as "Add identity '{DisplayName}': {Identity}"
SecurityIdentityAdded! (user, display, string identity, string token)
  as "Added identity '{DisplayName}' as {UserId}"

 
RemoveSecurityItem? (user)
SecurityItemRemoved! (user, string lookup, string type)

UpdateSecurityItemDisplayName? (user, display)
SecurityItemDisplayNameUpdated! (user, display)

SecurityRegistrationProcessCompleted! (display, user, token, registration)

AddPermissionToSecurityItem? (user, string permission)
PermissionAddedToSecurityItem! (user, display, string permission, token)


entity User (UserId id); 
// =====================
// holds login information about specific and unique user

using ? = ICommand<UserId>;
using ! = IEvent<UserId>;

CreateUser? (security)
    as "Create user {Id} for security {SecurityId}"

    UserCreated! (security, TimeSpan activityThreshold)
        as "Created user {Id} ({security}) with threshold {activityThreshold}"

ReportUserLoginFailure? (DateTime timeUtc, string ip)
  as "Report login failure for user {Id} at {timeUtc}"

UserLoginFailureReported! (DateTime timeUtc, security, string ip)
    as "User {id} login failed at {timeUtc} (via IP '{ip}')"

ReportUserLoginSuccess? (DateTime timeUtc, string ip)
    UserLoginSuccessReported! (DateTime timeUtc, security, string ip)
        as "User {Id} logged in at {timeUtc} (via IP '{ip}')"

LockUser? (string lockReason)
    as "Lock user {Id} with reason '{LockReason}'"

    UserLocked! (string lockReason, security, DateTime lockedTillUtc)
        as "User {Id} locked with reason '{LockReason}'."

UnlockUser? (string unlockReason)
UserUnlocked! (string unlockReason, security)

DeleteUser? ()
    UserDeleted! (security)
        as "Deleted user {Id} from security {SecurityId}"


entity Registration (RegistrationId id);
// =====================================
using ? = ICommand<RegistrationId>;
using ! = IEvent<RegistrationId>;

RegistrationHttpHeader(string key, string value)

RegistrationInfo(
  string ContactEmail, 
  string CustomerName, 
  string OptionalUserIdentity,
  string OptionalUserPassword,
  string OptionalCompanyPhone,
  string OptionalCompanyUrl,
  string OptionalUserDisplay,
  RegistrationHttpHeader[] headers,
  DateTime CreatedUtc)

CreateRegistration? (RegistrationInfo info)

RegistrationFailed! (RegistrationInfo info, string[] problems)
RegistrationCreated! (DateTime registeredUtc, CustomerInfo customer, SecurityInfo security)
    CustomerInfo(customer, string companyName, string realName, string customerEmail, string optionalPhone, string optionalUrl)
    SecurityInfo(security, string login, string pwd, string userDisplay, string optionalIdentity)



AttachUserToRegistration? (user, string userDisplay, string token)
UserAttachedToRegistration! (user, string userDisplay, string token)
RegistrationSucceeded! (customer, security, user, string userDisplayName, string userToken)
// This is not worth putting into a separate bounded context