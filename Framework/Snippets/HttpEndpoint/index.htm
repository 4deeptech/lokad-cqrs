<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
    <title>Lokad.CQRS.Http sample</title>
    <script src="scripts/jquery-1.6.2.min.js" type="text/javascript"></script>
    <style type="text/css">
        html, body { height: 100%; width: 100%; margin: 0; padding: 0; }
        a img { border: none; }
        
        .header { height: 130px; width: 100%; background-color: #f6f6f6; padding-top: 30px; border-top: #58595B 6px solid; border-bottom: #e1e1e1 1px solid; }
        .page_container { width: 1000px; margin: 0 auto; }
        .page_container .inner { padding: 0 30px; }
        .right { float: right; text-align: right; }
        
        .description { width: 480px; font-family: Sans-Serif; }
        .description span { font-style: italic; font-size: 10pt; }
        
        #gamePlace { float: left; width: 100%; height: 100%; background-color: #fff; }
        #tile { background: url(images/lokad-cqrs-logo.png) no-repeat; width: 107px; height: 107px; position: absolute; left: 400px; top: 300px; }
        #result { float: right; padding: 5px; border: green 2px solid; width: 200px; height: 100px; margin: 5px; }
        
        span.tooltip { display: inline; position: absolute; margin-left: 90px; margin-top: 90px; background: #ffffff; border: 1px solid #cccccc; color: #6c6c6c; }
        #tile:hover span { display: none; }
        
        #heatmapdiv {display: block; position: absolute; right: 10px; bottom: 10px;}
        footer { position: absolute;bottom: 10px;}
    </style>
</head>
<body>
    <div id="gamePlace">
        <div class="header">
            <div class="page_container">
                <div class="inner">
                    <div class="right description">
                        <span>This sample is a part of Lokad.CQRS guidance.  Drag the image around, or check out <a href="ReadMe.markdown">Readme</a> for more details.</span>
                    </div>
                    <div>
                        <a href="http://lokad.github.com/lokad-cqrs" style="border: none; outline: none;">
                            <img src="images/lokad_cqrs_logo_header.png" alt="Lokad.CQRS logo" /></a>
                    </div>
                </div>
            </div>
        </div>
        <div id="tile">
            <span class="tooltip">Draggable.</span>
        </div>
        <div id="result">
        </div>

        <div id="heatmapdiv">
            <h4>Mouse clicks heat map</h4>
            <a href="/heatmap.jpg">
                <img id="heatmap" src="/heatmap_thumb.jpg" alt="heatmap"></img>
            </a>
        </div>
    </div>
    <footer>
        <h4>Messages /sec graph</h4>
        <canvas id="eventsgraph" width="400" height="250" ></canvas>
    </footer>
    <script type="text/javascript">
        var ctx = document
                .getElementById("eventsgraph")
                .getContext('2d');
                
        var graph = {
            index : 0,
            xMax : 400,
            yMax : 250,
            X : 0,

            xOffset : 20,
            yOffset : 20,

            step : 1,
            data : new Array(),

            AddPoint : function (y) {
                if (this.X > this.xMax) {
                    this.X = 0;
                    this.index = 0;
                }

                this.data[this.index] = { x: this.X, y: y };
                this.index++;
                this.X += this.step;

                this.clearGraph(this.index);
            },

            Draw: function () {
                ctx.clearRect(-1 * this.xOffset, 0, this.xMax, this.yMax);

                ctx.moveTo(0, 0);

                ctx.save();
                ctx.beginPath();
                ctx.strokeStyle = 'black';
                for (var i = 0; i < this.data.length; i++) {
                    var value = this.data[i];

                    if (value.y == -1) {
                        ctx.moveTo(value.x, this.yMax - this.yOffset);
                    } else {
                        ctx.lineTo(value.x, this.yMax - value.y - this.yOffset);
                    }
                }
                ctx.stroke();

                ctx.save();
                ctx.beginPath();
                ctx.strokeStyle = 'green';

                var point = this.data[this.index - 1];
                ctx.arc(point.x, this.yMax - point.y - this.yOffset, 3, 0, 2 * Math.PI, false);
                ctx.fillStyle = 'green';
                ctx.fill();
                ctx.restore();

                this.DrawGrid();
            },

            DrawGrid : function () {
                ctx.save();
                ctx.strokeText('100', -1 * this.xOffset, this.yMax - 100 - 10);
                ctx.strokeText('200', -1 * this.xOffset, this.yMax - 200 - 10);
                ctx.restore();

                ctx.save();
                ctx.beginPath();

                ctx.lineWidth = 2;
                // x axis
                ctx.moveTo(0, this.yMax - this.yOffset);
                ctx.lineTo(this.xMax, this.yMax - this.yOffset);

                // y axis
                ctx.moveTo(0, this.yMax - 0);
                ctx.lineTo(0, 0);
                ctx.stroke();

                ctx.lineWidth = 1;

                ctx.strokeStyle = 'gray';
                // 100 msg /sec line
                ctx.moveTo(0, this.yMax - 100 - this.yOffset);
                ctx.lineTo(this.xMax, this.yMax - 100 - this.yOffset);

                // 200 msg /sec line
                ctx.moveTo(0, this.yMax - 200 - this.yOffset);
                ctx.lineTo(this.xMax, this.yMax - 200 - this.yOffset);
                ctx.stroke();

                ctx.restore();
            },

            clearGraph : function (start) {
                for (var i = start; i < start + 10; i++) {
                    var p = this.data[i];
                    if (p == null) break;

                    this.data[i] = { x: p.x, y: -1 };
                }
            },
            Init: function() {
                ctx.translate(this.xOffset, 0);
            }
        };

        $(document).ready(function () {
            var mouseDown = false;
            var tile = $("#tile");
            var oldMouseEvents;

            tile.mousedown(function (e) {
                mouseDown = true;
                oldMouseEvents = e;
            });

            tile.mouseup(function () {
                mouseDown = false;
            });

            $(document).mousemove(function (e) {
                if (mouseDown == false) return;

                tile.css({ 'left': e.pageX - 50, 'top': e.pageY - 50 });

                var mouseEvents = { x1: oldMouseEvents.pageX, y1: oldMouseEvents.pageY, x2: e.pageX, y2: e.pageY };
                oldMouseEvents = e;
                $.get('/mouseevents/MouseMoved', encodeURI(JSON.stringify(mouseEvents)));

            });

            $(document).mousedown(function (e) {
                var mouseEvents = { x: e.pageX, y: e.pageY };

                $.get('/mouseevents/MouseClick', encodeURI(JSON.stringify(mouseEvents)));
            });

            function mouseStats() {
                // rand parameter need for prevent caching ajax calls
                $.getJSON('/mousestats' + '?rand=' + new Date().getTime(), '', function (data) {
                    $('#result').css("border", "green 2px solid");
                    $("#result").html("Distance: " + data.Distance + "<br/>"
                                      + "Messages count: " + data.MessagesCount + "<br/>"
                                      + "Messages /sec: " + data.MessagesPerSecond + "<br/>");

                    graph.AddPoint(data.MessagesPerSecond);
                    graph.Draw();
                });
            }

            setInterval(mouseStats, 1000);
            setInterval(refreshHeatmap, 5000);

            function refreshHeatmap() {
                $('#heatmap').attr('src', '/heatmap_thumb.jpg?' + new Date().getTime());
            }

            // disable annoying selection
            function disableSelection(target) {
                target.onselectstart = function () { return false; };
            }

            disableSelection(document);

            // notification on ajax arrors.
            $('#result').ajaxError(function () {
                $('#result').css("border", "red 2px solid");
                $('#result').html("Http engine is not accessible!");
            });

            graph.Init();
            graph.DrawGrid();
        });
    </script>
</body>
</html>
